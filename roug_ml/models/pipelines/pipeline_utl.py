"""
This script defines a subclass of `sklearn.pipeline.Pipeline` called `PipeModel`, which extends the
functionality of scikit-learn pipelines. The purpose of this script is to provide additional methods
for managing and manipulating pipeline objects, particularly for saving and loading individual
pipeline steps, extracting pipeline parameters, and accessing reports generated by each step.
"""

import os
from sklearn.pipeline import Pipeline
from roug_ml.utl.paths_utl import create_dir_path
from roug_ml.utl.etl.model_etl import save_default_model, load_default_model


class PipeModel(Pipeline):
    """
    Extends the scikit-learn Pipeline class to provide additional functionality for saving,
    loading, and reporting on each step of the pipeline.
    """
    def __init__(self, steps: list, **params: dict):
        """
        Initialize the pipeline and the report.

        :param steps: List of (name, transform) tuples representing the steps in the pipeline.
        :param params: Additional parameters to pass to the Pipeline constructor.
        """

        super().__init__(steps, **params)
        self.report = {}

    def save(self, model_path: str, model_name: str) -> None:
        """
        Save each step of the pipeline.
        :param model_path: The path where to save it.
        :param model_name: The name of the model.
        :return: None
        """
        path_pipe = os.path.join(model_path, model_name)
        create_dir_path(path_pipe)

        for step_id, step in self.steps:

            if hasattr(step, "save"):
                step.save(path_pipe, step_id)

            else:
                save_default_model(step, path_pipe, step_id)

    def load(self, model_path: str, model_name: str) -> Pipeline:
        """
        Load each step of the pipeline.
        :param model_path: The path where to save it.
        :param model_name: The name of the model.
        :return PipeModel: An instance of the PipeModel class with loaded steps.

        """
        path_pipe = os.path.join(model_path, model_name)

        new_steps = []
        for step_id, step in self.steps:

            if hasattr(step, "load"):
                step_tmp = step.load(path_pipe, step_id)

            else:
                step_tmp = load_default_model(path_pipe, step_id)

            new_steps.append((step_id, step_tmp))

        self.steps = new_steps

        return self

    def get_pipeline_params(self) -> dict:
        """
        Returns parameters for this pipeline that can be used to set parameters.
        :return: The parameters set for this pipeline.
        """
        params = self.get_params()
        for step in params["steps"]:
            params.pop(step[0])
        params.pop("steps")
        return params

    def get_report(self) -> dict:
        """
        Return the reports from each step of the pipeline.

        :return: Dictionary containing the reports from each step of the pipeline.
        """
        # Get report from each step
        for step_id, step in self.steps:
            if hasattr(step, "report"):
                self.report[step_id] = step.report
            else:
                self.report[step_id] = None

        return self.report
